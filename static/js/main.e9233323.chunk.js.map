{"version":3,"sources":["assets/hackillinois_logo.png","assets/race_car.webp","components/SideNav/SideNav.js","components/MainContent/MainContent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SideNav","className","id","src","logo","alt","MainContent","useState","events","setEvents","useEffect","axios","get","then","eTemp","data","window","addEventListener","event","console","log","document","onscroll","sort","a","b","startTime","eventsArr","map","i","arr","tTemp","Date","tTemp1","toLocaleTimeString","split","slice","length","time","join","key","description","locations","car","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,+C,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mOCmB5BC,G,MAfC,WACZ,OACI,yBAAKC,UAAU,YACX,yBAAKC,GAAG,OAAOC,IAAKC,IAAMC,IAAI,sBAC9B,wBAAIJ,UAAU,kBACV,wCACA,oCACA,sCACA,sCACA,2C,kDC4CDK,EApDK,WAAO,IAAD,EACMC,mBAAS,IADf,mBACfC,EADe,KACPC,EADO,KAEtBC,qBAAU,WACNC,IAAMC,IAAN,uCAAiDC,MAAK,SAACC,GACnDL,EAAUK,EAAMC,KAAKP,aAE1B,IAEHE,qBAAU,WACNM,OAAOC,iBAAiB,UAAU,SAACC,GAC/BC,QAAQC,IAAIC,SAASC,aAEzBH,QAAQC,IAAI,SACd,IAGFZ,EAAOe,MAAK,SAACC,EAAGC,GACZ,OAAOD,EAAEE,UAAYD,EAAEC,aAG3B,IAAMC,EAAYnB,EAAOoB,KAAI,SAACV,EAAOW,EAAGC,GACpC,IAAMC,EAAQ,IAAIC,KAAuB,IAAlBd,EAAMQ,WACzBO,EAASF,EAAMG,qBAAqBC,MAAM,KAAKC,QACnDH,EAASA,EAAOA,EAAOI,OAAS,GAAGF,MAAM,KAAK,GAC9ChB,QAAQC,IAAIa,GACZ,IAAMK,EAAOP,EAAMG,qBAAqBC,MAAM,KAAKC,MAAM,EAAG,GAAGG,KAAK,KAAO,IAAMN,EACjF,OACI,yBAAKhC,UAAU,OAAOuC,IAAKX,GACvB,yBAAK5B,UAAU,QACX,2BAAIqC,IAER,yBAAKrC,UAAU,kBACX,2BAAIiB,EAAMuB,aACV,uBAAGvC,GAAG,YAAYgB,EAAMwB,UAAU,GAAGD,kBAOrD,OACI,yBAAKxC,UAAU,gBACX,yBAAKE,IAAKwC,IAAKzC,GAAG,aAClB,wBAAIA,GAAG,WAAP,YACA,yBAAKD,UAAU,YACX,sCACC0B,KCpCFiB,MATf,WACE,OACG,yBAAK3C,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEc4C,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS7B,SAAS8B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,MAAK,SAAA0C,GACjCA,EAAaC,kB","file":"static/js/main.e9233323.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hackillinois_logo.275016af.png\";","module.exports = __webpack_public_path__ + \"static/media/race_car.83cba05a.webp\";","import React from 'react';\r\nimport logo from './../../assets/hackillinois_logo.png';\r\nimport './SideNav.scss';\r\n\r\nconst SideNav = () => {\r\n    return (\r\n        <div className=\"side-nav\">\r\n            <img id=\"logo\" src={logo} alt=\"hackillinois-logo\" />\r\n            <ul className=\"side-nav-items\">\r\n                <li>Schedule</li>\r\n                <li>Maps</li>\r\n                <li>Prizes</li>\r\n                <li>Travel</li>\r\n                <li>Mentors</li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideNav;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './MainContent.scss';\r\nimport car from './../../assets/race_car.webp';\r\n\r\nconst MainContent = () => {\r\n    const [events, setEvents] = useState([]); //array intialization\r\n    useEffect(() => {\r\n        axios.get(`https://api.hackillinois.org/event/`).then((eTemp) => { //data fetching\r\n            setEvents(eTemp.data.events)\r\n        })\r\n    }, []); //empty array to execute useEffect only once\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', (event) => {\r\n            console.log(document.onscroll)    \r\n        })\r\n        console.log('hit')\r\n    },[])\r\n\r\n\r\n    events.sort((a, b) => {                  //sorting fetched data based on time\r\n        return a.startTime - b.startTime\r\n    })\r\n\r\n    const eventsArr = events.map((event, i, arr) => {  // returning formatted HTML data\r\n        const tTemp = new Date(event.startTime * 1000);\r\n        let tTemp1 = tTemp.toLocaleTimeString().split(':').slice();\r\n        tTemp1 = tTemp1[tTemp1.length - 1].split(' ')[1];\r\n        console.log(tTemp1);\r\n        const time = tTemp.toLocaleTimeString().split(':').slice(0, 2).join(':') + ' ' + tTemp1;\r\n        return (\r\n            <div className=\"info\" key={i}>\r\n                <div className=\"time\">\r\n                    <p>{time}</p>\r\n                </div>\r\n                <div className=\"title-location\">\r\n                    <p>{event.description}</p>\r\n                    <p id=\"location\">{event.locations[0].description}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n\r\n\r\n    return (  //returning basic structure for MainContent\r\n        <div className=\"main-content\">\r\n            <img src={car} id=\"race-car\" />\r\n            <h1 id=\"heading\">Schedule</h1>\r\n            <div className=\"info-box\">\r\n                <h2>Monday</h2>\r\n                {eventsArr}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainContent;","import React from 'react';\nimport './App.scss';\nimport SideNav from './components/SideNav/SideNav';\nimport MainContent from './components/MainContent/MainContent';\n\n\nfunction App() {\n  return (\n     <div className=\"App\">\n      <SideNav/>\n      <MainContent/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}